abstract class Employee (
    val firstName: String,
    val secondName: String,
    val baseSalary: Double,
    val experience: Int,
    var manager: Manager ? = null
    ) {
    open fun calcSalary () : Double {
        var salary: Double
        if (experience > 5) {
            salary =  baseSalary*1.2 + 500
        } else if (experience > 2) {
            salary =  baseSalary + 200
        } else {
            salary =  baseSalary
        }
        return salary;
    }

    fun giveSalary () {
        println("$firstName $secondName got salary: ${ Math.round(calcSalary()).toDouble() }")
    }

    fun assignToManager(assignedManager : Manager) {
        manager = assignedManager
        assignedManager.team.add(this)
    }
}

class Developer (
    firstName: String,
    secondName: String,
    baseSalary: Double,
    experience: Int
) : Employee (firstName, secondName, baseSalary, experience)  {

}

class Designer (
    firstName: String,
    lastName: String,
    baseSalary: Double,
    experience: Int,
    var effCoeff : Double
) : Employee (firstName, lastName, baseSalary, experience)  {
    override fun calcSalary() : Double {
        return super.calcSalary() * effCoeff
    }
}



class Manager (
    firstName: String,
    lastName: String,
    baseSalary: Double,
    experience: Int,
    var team : MutableList<Employee> = mutableListOf()
) : Employee (firstName, lastName, baseSalary, experience)  {
    override fun calcSalary() : Double {
        var salary = super.calcSalary()
        val teamNum = team.count()
        val devNum = team.filterIsInstance<Developer>().count()
        if (teamNum > 10) {
            salary = salary + 300
        } else if (teamNum > 5) {
            salary = salary + 200
        }
        if (devNum > teamNum / 2) {
            salary = salary * 1.1
        }
        return salary;
    }

    fun addEmployee (employee : Employee) {
        team.add(employee)
        employee.manager = this
    }
}



class Department (
    var managers : MutableList<Manager> = mutableListOf()
) {

    fun addManager(manager: Manager) {
        managers.add(manager)
    }

    fun giveAllSalaries() {
        managers.forEach{
                manager ->
            manager.giveSalary()
            manager.team.forEach{
                employee ->  employee.giveSalary()
            }
        }
    }
}



fun main () {
    var Norton =  Developer("Andre","Norton",7000.00, 1);
    var Akunin =  Developer("Boris", "Akunin",9000.00, 2);
    var Bukovski =  Developer("Charls","Bukovski",2000.00, 3)
    var Gorkiy =  Developer("Maksim","Gorkiy",4000.00, 7);
    var Uelsh =  Developer("Irvin","Uelsh",1500.00, 5);
    var Alan =  Developer("Edgar","Alan",1400.00, 4);
    var King =  Developer("Stivin","King",1500.00, 4);

    var Sindzi =  Designer("Ikari","Sindzi",1400.00, 2, 0.6);
    var Rey =  Designer("Ayanami","Rey",1400.00, 1, 0.7);
    var Aska =  Designer("Lengvi","Aska",1400.00, 4, 0.8);
    var Micuki =  Designer("Rucuki","Micuki",1400.00, 6, 0.9);

    var Lupa =  Manager("Lupa","Nachalnik",2000.00, 6);
    var Pupa =  Manager("Pupa","Nachalnik",2000.00, 4);

    Norton.assignToManager(Lupa)
    Akunin.assignToManager(Lupa)
    Bukovski.assignToManager(Lupa)
    Gorkiy.assignToManager(Lupa)
    Uelsh.assignToManager(Lupa)
    Alan.assignToManager(Lupa)
    King.assignToManager(Lupa)

    Sindzi.assignToManager(Pupa)
    Rey.assignToManager(Pupa)
    Aska.assignToManager(Pupa)
    Micuki.assignToManager(Pupa)

    var production = Department()

    production.addManager(Lupa)
    production.addManager(Pupa)

    production.giveAllSalaries()

}
